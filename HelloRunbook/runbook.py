# THIS FILE IS AUTOMATICALLY GENERATED.
"""
Sample Calm DSL for Hello runbook

The top-level folder contains the following files:
HelloRunbook/
├── runbook.py
└── scripts
    └── entity_stats.py

On run, this runbook does the following:
  1. Creates a HTTP and a Linux Endpoint
  2. Create runbook variables to store calm entities count
  3. Added HTTP Tasks to get calm entities count
  4. Runs Exec Task (which prints entities status) and while loop task in parallel
  5. Under while loop task, a decision task is triggered using loop_variable

Useful commands (execute from top-level directory):
  1. calm compile runbook --file HelloRunbook/runbook.py
  2. calm create runbook --file HelloRunbook/runbook.py --name <runbook_name>
  3. calm get runbooks --name <runbook_name>
  4. calm describe runbook <runbook_name>
  5. calm run runbook <runbook_name> -w
  6. calm get runbook_executions
  7. calm delete runbook <runbook_name>
  8. calm watch runbook_execution <RUNLOG_UUID>
  9. calm pause runbook_execution <RUNLOG_UUID>
  10. calm resume runbook_execution <RUNLOG_UUID>
  11. calm abort runbook_execution <RUNLOG_UUID>

"""
import json

from calm.dsl.runbooks import RunbookVariable as Variable
from calm.dsl.runbooks import RunbookTask as Task, CalmEndpoint as Endpoint
from calm.dsl.runbooks import runbook, basic_cred
from calm.dsl.runbooks import parallel, branch


# Create Endpoints
Cred = basic_cred("vm_username", "vm_password", name="endpoint_cred")
PCEndpoint = Endpoint.HTTP("https://10.42.64.39:9440/api/nutanix/v3")
IPEndpoint = Endpoint.Linux.ip(["VM_IP"], cred=Cred)


@runbook
def Hello(endpoints=[PCEndpoint, IPEndpoint]):
    """ Sample runbook for Hello """

    # Defining variables for entity counts
    endpoints_count  = Variable.Simple.int("0", runtime=True)  # noqa
    blueprints_count = Variable.Simple.int("0", runtime=True)  # noqa
    runbooks_count   = Variable.Simple.int("0", runtime=True)  # noqa
    apps_count       = Variable.Simple.int("0", runtime=True)  # noqa

    # HTTP Tasks to get CALM Entity Counts
    # default target is set as endpoints[0] = PCEndpoint, therefore target not required for http tasks
    Task.HTTP.post(
        name="EndpointCount",
        relative_url="/endpoints/list",
        body=json.dumps({}),
        headers={"Authorization": "Bearer @@{calm_jwt}@@"},
        content_type="application/json",
        response_paths={"endpoints_count": "$.metadata.total_matches"},
        status_mapping={200: True},
    )
    Task.HTTP.post(
        name="BlueprintCount",
        relative_url="/blueprints/list",
        body=json.dumps({}),
        headers={"Authorization": "Bearer @@{calm_jwt}@@"},
        content_type="application/json",
        response_paths={"blueprints_count": "$.metadata.total_matches"},
        status_mapping={200: True},
    )
    Task.HTTP.post(
        name="RunbookCount",
        relative_url="/runbooks/list",
        body=json.dumps({}),
        headers={"Authorization": "Bearer @@{calm_jwt}@@"},
        content_type="application/json",
        response_paths={"runbooks_count": "$.metadata.total_matches"},
        status_mapping={200: True},
    )
    Task.HTTP.post(
        name="AppCount",
        relative_url="/apps/list",
        body=json.dumps({}),
        headers={"Authorization": "Bearer @@{calm_jwt}@@"},
        content_type="application/json",
        response_paths={"apps_count": "$.metadata.total_matches"},
        status_mapping={200: True},
    )

    # running tasks in parallel
    with parallel() as p:

        with branch(p):

            # Exec Task to print all entity stats
            Task.Exec.escript(name="EntityStats", filename="scripts/entity_stats.py2", target=endpoints[1])

        with branch(p):

            # loop task example
            with Task.Loop(iterations=2, name="LoopTask", loop_variable="loop_var"):

                # decision task example
                with Task.Decision.escript(name="DecisionTask", script="print 'ExitCode-@@{loop_var}@@';exit(@@{loop_var}@@)") as d:
                    if d.ok:
                        Task.Exec.escript(name="TruePath", script="print 'True path is executed'")
                    else:
                        Task.Exec.escript(name="FalsePath", script="print 'False path is executed'")
